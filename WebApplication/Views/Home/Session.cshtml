@model VonageVideoAPISession

@{
    ViewData["Title"] = Model.SessionId;

    string token = ViewBag.Token;
}

<style type="text/css">
    label {
        display: block;
    }
</style>

<script src="https://static.opentok.com/v2/js/opentok.js"></script>

<iframe src="about:blank" name="miniframe" style="float: right; resize: both" width="320" height="180" allowfullscreen></iframe>

<form asp-controller="Home" asp-action="ForgetSession" asp-route-id="@Model.SessionId" onsubmit="return confirm('Are you sure?')">
    <input type="submit" value="Forget session" />
</form>

<hr />

<form asp-controller="Home" asp-action="StartArchive" asp-route-sessionId="@Model.SessionId" target="miniframe">
    You can start an archive recording. If an archive is already started, an error will be thrown.
    <label>
        <input type="checkbox" name="hasAudio" value="true" checked />
        Has audio
    </label>
    <label>
        <input type="checkbox" name="hasVideo" value="true" checked />
        Has video
    </label>
    <label>
        Layout
        <select name="layout">
            <option>Best Fit</option>
            <option>Picture-in-Picture</option>
            <option>Vertical Presentation</option>
            <option>Horizontal Presentation</option>
        </select>
    </label>
    <label>
        Or use custom layout CSS:
        <textarea name="layoutCss" style="resize: both"></textarea>
    </label>
    <label>
        Name
        <input name="name" type="text" />
    </label>
    <label>
        Output mode
        <select name="composed">
            <option value="true">Composed</option>
            <option value="false">Individual</option>
        </select>
    </label>
    <label>
        Resolution
        <select name="resolution">
            <option>640x480</option>
            <option>1280x720</option>
        </select>
    </label>
    <input type="submit" value="Start archive" />
</form>

<form asp-controller="Home" asp-action="StopArchive" asp-route-sessionId="@Model.SessionId" target="miniframe">
    When you stop an archive using this button, the resulting video file will be shown to the right (if available and in .mp4 format).
    <input type="submit" value="Stop archive" />
</form>

<form asp-controller="Home" asp-action="ListArchives" method="get">
    You can also list archives that have been created for this session.
    <input name="sessionId" value="@Model.SessionId" type="hidden" />
    <label>
        Maximum
        <input name="max" type="number" min="10" max="@(int.MaxValue)" value="10" />
    </label>
    <input type="submit" value="List archives" />
</form>

<hr />

<form asp-controller="Home" asp-action="StartBroadcast" asp-route-sessionId="@Model.SessionId" target="miniframe">
    You can start a broadcast. If a broadcast is already started, the existing broadcast will be displayed in the lil' frame to the right (if an HLS version has been created).
    <label>
        Layout
        <select name="layout">
            <option>Best Fit</option>
            <option>Picture-in-Picture</option>
            <option>Vertical Presentation</option>
            <option>Horizontal Presentation</option>
        </select>
    </label>
    <label>
        Or use custom layout CSS (URL):
        <input name="layoutCss" type="url" />
    </label>
    <label>
        Maximum duration (seconds)
        <input name="maxDuration" type="number" min="60" max="@(60 * 60 * 10)" value="@(60 * 60 * 4)" />
    </label>
    <label>
        <input type="checkbox" name="hls" value="true" checked />
        Create HLS stream
    </label>
    <label>
        RTMP server URL (optional):
        <input name="rtmpServerUrl" type="url" />
    </label>
    <label>
        RTMP stream key (optional):
        <input name="rtmpStreamName" type="text" />
    </label>
    <label>
        Resolution
        <select name="resolution">
            <option>640x480</option>
            <option>1280x720</option>
        </select>
    </label>
    <input type="submit" value="Start or view broadcast" />
</form>

<form asp-controller="Home" asp-action="StopBroadcast" asp-route-sessionId="@Model.SessionId" target="miniframe">
    <input type="submit" value="Stop broadcast (if any)" />
</form>

<hr />

<hr />

<iframe src="about:blank" name="miniframe2" style="float: right; resize: both" width="320" height="90"></iframe>

<form asp-controller="Home" asp-action="ChangeLayout" asp-route-sessionId="@Model.SessionId" target="miniframe2">
    Change layout for all existing broadcasts and archives:
    <label>
        Layout
        <select name="layout">
            <option>Best Fit</option>
            <option>Picture-in-Picture</option>
            <option>Vertical Presentation</option>
            <option>Horizontal Presentation</option>
        </select>
    </label>
    <label>
        Or use Best Fit when screen share is inactive, and when it's active use:
        <select name="screenSharingLayout">
            <option></option>
            <option>Picture-in-Picture</option>
            <option>Vertical Presentation</option>
            <option>Horizontal Presentation</option>
        </select>
    </label>
    <label>
        Or use custom layout CSS (URL):
        <input name="layoutCss" type="url" />
    </label>
    <input type="submit" value="Set new layout" />
</form>

<div id="container">

</div>

<button id="publish_camera">Publish camera</button>
<button id="publish_screen">Publish screen</button>

<script type="text/javascript">
    const projectId = @Html.Raw(Json.Serialize(Model.Project.ApiKey));
    const sessionId = @Html.Raw(Json.Serialize(Model.SessionId));
    const token = @Html.Raw(Json.Serialize(ViewBag.Token));

    const subscribers = new Set();
    const session_promise = new Promise((r, x) => {
        const session = OT.initSession(projectId, sessionId);

        session.on("streamCreated", async event => {
            console.log("streamCreated", event);

            const session = await session_promise;
            const subscriber = session.subscribe(event.stream, document.getElementById("container"), {
                insertMode: "append"
            }, err => {
                if (err) {
                    x(err);
                } else {
                    subscribers.add(subscriber);
                }
            });
        });

        session.on("streamDestroyed", async event => {
            for (const subscriber of subscribers) {
                if (subscriber.streamId === event.stream.id) {
                    session.unsubscribe(subscriber);
                    subscribers.delete(subscriber);
                }
            }
        });

        session.connect(token, err => {
            if (err) {
                x(err);
            } else {
                r(session);
            }
        });
    });

    const publishers = new Set();
    const publish = async (videoSource) => {
        try {
            const session = await session_promise;

            const publisher_promise = await new Promise((r, x) => {
                const publisher = OT.initPublisher(document.getElementById("container"), {
                    videoSource: videoSource,
                    insertMode: "append"
                }, err => {
                    if (err) {
                        x(err);
                    } else {
                        r(publisher);
                    }
                });
            });

            const publisher = await publisher_promise;

            publisher.on("destroyed", () => {
                publishers.delete(publisher);
            });

            session.publish(publisher);
            publishers.add(publisher);

            const button = document.createElement("button");
            button.innerText = `Unpublish ${publisher.streamId}`;
            button.addEventListener("click", () => {
                session.unpublish(publisher);
                document.body.removeChild(button);
            });
            document.body.appendChild(button);

            if (videoSource === "screen") {
                const resp = await fetch({
                    method: "POST",
                    url: `/Home/MakeBig?sessionId=${session.id}&streamId=${publisher.stream.id}`
                });
                if (!resp.ok) {
                    alert("Could not assign full and focus classes to stream");
                }
            }
        } catch (e) {
            console.error(e);
        }
    };

    document.getElementById("publish_camera").addEventListener("click", () => publish(undefined));
    document.getElementById("publish_screen").addEventListener("click", () => publish("screen"));
</script>